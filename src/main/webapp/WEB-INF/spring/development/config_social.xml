<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:twitter="http://www.springframework.org/schema/social/twitter"
       xmlns:social="http://www.springframework.org/schema/social"
       xmlns:facebook="http://www.springframework.org/schema/social/facebook"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/social http://www.springframework.org/schema/social/spring-social.xsd
       http://www.springframework.org/schema/social/twitter http://www.springframework.org/schema/social/spring-social-twitter.xsd
       http://www.springframework.org/schema/social/facebook http://www.springframework.org/schema/social/spring-social-facebook.xsd">

    <!-- Ensures that configuration properties are read from a property file -->
    <context:property-placeholder location="classpath:configuration/social/social.properties"/>

    <!--
        Configures FB and Twitter support.
    -->
    <!--<facebook:config app-id="${facebook.app.id}" app-secret="${facebook.app.secret}"/>-->
    <!--<twitter:config app-id="${twitter.consumer.key}" app-secret="${twitter.consumer.secret}"/>-->

    <!--
        Configures the connection repository. This application uses JDBC
        connection repository which saves connection details to database.
        This repository uses the data source bean for obtaining database
        connection.
    -->
    <social:jdbc-connection-repository/>

    <!--
        This bean manages the connection flow between the account provider and
        the example application.
    -->

    <bean id="connectController" class="org.springframework.social.connect.web.ConnectController"
          autowire="constructor"/>

    <!-- Two connection factories, one for Facebook and one for Twitter, have been registered.
    If you would like to support other providers, simply register their connection factories here. -->
    <bean id="connectionFactoryLocator"
          class="org.springframework.social.connect.support.ConnectionFactoryRegistry">
        <property name="connectionFactories">
            <list>
                <bean class="org.springframework.social.twitter.connect.TwitterConnectionFactory">
                    <constructor-arg value="test" />
                    <constructor-arg value="test}" />
                </bean>
                <bean class="org.springframework.social.facebook.connect.FacebookConnectionFactory">
                    <constructor-arg value="test" />
                    <constructor-arg value="test" />
                </bean>
            </list>
        </property>
    </bean>

    <!--JdbcUsersConnectionRepository uses the TextEncryptor to encrypt credentials when persisting connections. 
    Spring Security 3.1 makes a few useful text encryptors available via static factory methods in its Encryptors class.-->

    <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors"
          factory-method="noOpText" />

</beans>